
- O ES6 é uma sígla para ecmascript e a versão e basicamente é quem decide e formula as novas funcionalidades do javaScript, como a linguagem está sendo atiualizada todos os anos, as novas regras e funcionalidades são juntadas num pacote chamado ecmascript.

- A função do Babel é pegar o código escrito com as novas funcionalidades e converter num código que todos os navegadores entendam.

- O arquivo 'package.json' vai armazenar as informações de dependecias de nossa aplicação como por exemplo o babel. As dependencias podem ser instaladas pelo proprio terminal.

- A dependencia 'babel/cli' vai nos dar a oportunidade de trabalhar com a interface de linha de comando do babel. A dependencia 'babel/preset-env' vai entender qual ambiente em que se está trabalhando como o navegador por exemplo e vai converter as fitures do ES6/7/8 para o que os navegadores entendem.

- para configurar o bable é necessário criar um arquivo chamado '.babelrc' criando um objeto e colocando o preset desejado.

- Os scripts dentro do arquivo 'package.json' são formas de a gente executar comandos dentro do nosso terminal que fazem mais de alguma coisa como por exemplo, gerar um arquivo bundle.js que é um arquivo com os códigos já convertidos para uma forma que os navegadores entendam.

- Com o ES6 agora é possível usar classes no JavaScript e as classes possuem todas as mesmas propriedades de classes como em outras linguagens de programação como método construtor, além de possuir herança de classes também, para usar herança é necessário usar o comando extends.

- Quando se cria um método constructor em uma classe que herda outra classe é muito bom a gente chamar o método constructor da classe pai, usando pra isso o comando 'Super()' e a partir dai pode-se criar as novas propriedades.

- Para se referenciar uma classe usa-se o 'new' porém é possível criar métodos estaticos da classe de forma a poder usa-los sem pra isso precisar usar o 'new', para isso existe o comando 'static' que pode ser usado antes de dar o nome da classe. Porém toda vez que a gente define um método como estatico, ele não enxerga o resto da classe.

- A Diferença do var para o const é que a const não pdoe ter seu valor reatribuido mas, pode ter o valor dentro de objetos alterados (essa operação chama-se mutação). O Let é o comando utilizado para criar variáveis de escopo, ou seja, variáveis que só podem ser vista dentro do escopo em que ela foi criada.

- A função map serve para percorrer um arrey e retornar alguma coisa de dentro. O reduce é uma função que consome todo o arrey o transforma em uma única informação. O filter é uma função que irá fazer uma filtragem de dados baseado em alguma condição especificada. A função find é usada quando a gente quer verificar se existe alguma informação dentro do arrey.

- As funções que não tem nome definido são consideradas funções anônimas e elas são os melhores lugares para se utilizar Arrow Function que é basicamente uma função escrita com uma quantidade de código bem menor e com uma sintaxe mais simples

Ex:. função sem Arrow function

const newArr = arr.map(function(item){
    return item * 2;
});


Ex:. Função com Arrow function

const newArr = arr.map(item => item * 2);

- Nas arrow functions é possivel retornar qualquer tipo de dado, porém ao tentar retornar objetos deve-se colocar parênteses antes, caso contrário o compilador vai entender as chaves do objeto como o escopo da função, retornando um erro.

- Outra funcionalidade padrão do ES6 é a de colocar valores padões para os parâmetros das funções, sejam elas funções normais ou Arrow Functions.

- O conceito de desestruturação vem como um facilitador de busca em objetos no ES6, reduzindo bastante as linhas de código para se fazer as buscas.

Ex:. Buscando em objetos sem desestruturação:

const nome = usuario.nome;
const idade = usuario.idade;
const rua = usuario.endereco.ru

Ex:. Buscando em objetos com desestruturação

const {nome, idade, endereco: {rua, estado} } = usuario;

- Os operadores rest e spread são caracterizados pelo uso dos três pontos (...). O rest pode ser utilizado pra assumir mais de um valor em uma única variavel na hora de uma busca seja em objeto ou em arrey, como se fosse o resto de uma prorpiedade, também pode ser utilizado como parâmetro de uma função. Já o spread faz uma função diferente do rest, enquanto o rest faz o papel de pegar o resto de alguma desestruturação, o spread faz o papel de propagar, repassar as informações de algum objeto ou arrey para outra esturtura de dados. 

- A funcionalidade Template Literals permite que seja incluido variáveis dentro de strings de forma mais simples, usando crase (``) para digitar a string e quando for incluir a variável utilizar o (${variável}). Dessa forma utlizamos menos códigos e evitamos de usar várias concatenações.

Ex:. Tamplate Literals

console.log(`Meu nome é ${nome} e tenho ${idade}`);

- A sintaxe curta de objeto (object short syntax) do ES6 permite que quando o nome da propriedade do objeto é igual ao nome da variável, pode-se deixar somente o nome da variável sem a utilização dos dois pontos.

- O Webpack é um serviço que vai possibilitar que trabalhemos com varios arquivos .js na nossa aplicação. Então em vez de termos somente o arquivo main.js poderemos ter varias pastas de arquivos .js alem de arquivos de imagem, CSS, JSON entre outros atraveś do javaScript utilizando o WebPack e ainda sim todo esse código será transformado em um arquivo bundle.js.

- No arquivo package.json a parte de 'dependeces' foi alterada para 'devDependeces' pelo fato de todas as dependências usadas até agora serem exclusivas para a parte de desenvolvimento, não sendo necessárias na parte de produção (online) uma vez que, na parte de produção será enviado somente o arquivo bundle.js. Com isso todas as dependencias instaladas para a parte de desenvolvimento devem ser instaladas com o '-D' no final que indicará que elas devem ir para o 'devDependeces'.

- O arquivo de configuração do webpack é o webpack.config.js e nele nós iremos configurar a forma como o webpack vai funcionar. toda configuração estará dentro do module.exports e a primeira prorpiedade é o "entry" que basicamente vai falar qual o arquivo principal do projeto. Depois vem o 'output' que é pra onde deve ser transferido o código sem a sintaxe do ES6, dentro do "output" é necesário passar duas prorpiedades, o "path" que será passado a variável "__dirname" que é uma variável global que referencia toda a pasta onde se encontra o arquivo "webpack.config.js", e a segunda propriedade é o "filename" que nada mais é do que o nome do arquivo "bundle.js" por exemplo.

- Depois de configurar o "output" tem uma nova configuração chamada "modules" que tem uma propriedade chamada "rules" que é obrigatória que vai dizer como o webpack deve se comportar quando o usuário estiver tentando importar novos arquivos .js, dentro do 'rules' vamos informar qual loader que será utilizado, nesse caso o 'babel' que é um loader, ou seja uma forma de manipular o conteúdo do arquivo e fazer algum tipo de alteração. Dentro do rules será passado um test que será criado uma expressão regular para buscar se o arquivo termina com .js "/\.js$/" (o sinal de dolar significa o sinal e as duas barras a expressão regular). Após o test será passado um 'exclude' passando a pasta node_modules dentro para que o babel não execute nenhum arquivo .js de dentro da pasta node_modules e somente os arquivos do projeto. Depois vem a configuração 'use' que dentro terá a configuração loader que será passado nesse caso o 'babel-loader'.

- A partir do momento que usamos o 'export' antes de uma função, variável, classe, etc, é possível importar ela com o mesmo nome para qualquer outro arquivo com um 'import {variavel} from './arquivo' '. Também existe o 'export default' que é o export padrão e cada arquivo só pode ter um, para fazer um import nesse caso não precisa das chaves e pode-se dar o nome que quiser para a função na hora da importação.

- Outra coisa interessante é que num mesmo arquivo pode-se ter um export default e outros exports normais também, mudando apenas a sintaxe na hora da importação

- Para deixar o projeto mais organizado é bom separar em duas pastas, uma chamada src onde ficará todo o código javaScript da aplicação e outra pasta chamada public onde ficarão todos os arquivos que não serão trabalhados diretamente com a parte do webpack, logo, na pasta src ficarão todos os arquivos que o webpack precisa monitorar as mudanças enquanto no public ficarão os arquivos que não precisam de monitoração pelo webpack.

- Instalado o webpack dev server uma nova configuração surge para o arquivo webpack.config.js chamada 'devServer' que tem a propriedade 'contentBase' que é basicamente qual o caminho que deve ser aberto o servidor da aplicação, geralmente esse caminho é a pasta onde fica o arquivo index.html.

- O webpack-dev-server imbute o arquivo bundle.js sozinho fazendo-o não aparecer, caso deseje que ele seja mostrado deve-se criar um novo script com o webpack em modo de produção.

- A grande utilidade do webpack-dev-server é que ele monitora qualquer alteração feita no código JavaScript e atualiza a pagina automaticamente para que você veja o resultado em tela.

- A partir do ES8 é possível usar a sintaxe do Async/await que deixa o código bem mais limpo quando vai se trabalhar com assincronismo dentro do JavaScript. Em vez de termos que ficar trabalhando com .then e .cath o tempo todo definimos uma função como 'async' que irá executar a promise e dentro dela definimos uma variável "response" e definimos ela como "await" e colocamos o nome da função que irá retornar a promise. Dessa forma podemos trabalhar quantas vezes quisermos com o "await".

- Quando criamos uma async function essa função automaticamente vira uma promise. E nunca o await poderá ser usando sem estar dentro de uma função async. O async/await também pode ser usado com arrow functions.

-


 
